Patterns arise when there is a resonable resolution to a set of constraints.
The constraints can be as varied as the programming language choice with
its attentdant paradyms, the experiences of the development team,
the functional behaviors or performance requirements. 

For example.
Concurency is a primary constraint which can be resolved by.
Threading
Command Pattern
etc.

Many problems can be simplified by eliminate the concurrency 
constraint.  For example the procedure call, synchronous 
presumes no concurency over the call.

Theory of Constraints
TRIZ
Nature of Order

=Forces=
speed of task excution
memory usage during task
speed of development
comprehesibility of algorithm
distribution/delegation of task
connection reliablity in environment
collaboration type (close v. merge)
mutablity of assumtions during task


=Goals=
task
task chain
improved throughput
improved latency
improved power usage


=Steps=
Identify pattern usage
Identify areas where patterns develop & the forces causing them to develop
Identify ideal solution & how the pattern approximates that solution

=Framwork=
Evaluate the framework as a collection of components supporting patterns


